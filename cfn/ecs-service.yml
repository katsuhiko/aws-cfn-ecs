AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Service Template
Parameters:
  ProjectName:
    Type: String
    Default: demo
    Description: Project name
  SecuritySalt:
    Type: String
    Default: KsNl3dlYuYLYniYcW89J2J2H2Xzrbe6x4SgolxFmn5B32DLssjXekgVZ4Rg3JKZc
    Description: Security salt

Resources:
  ##############################
  # IAM Role
  ##############################
  # Fargate（アプリケーション）に付与する権限
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-task-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  # Fargate の起動に必要な権限
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ecs-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  ##############################
  # ECS Task Denisition
  ##############################
  ECSTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ProjectName}-template"
      RetentionInDays: 3

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ProjectName}-template"
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: app
          Image:
            !Sub [
              "${Param1}:latest",
              {
                Param1:
                  { "Fn::ImportValue": !Sub "${ProjectName}-app-repository" },
              },
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Environment:
            - Name: APP_NAME
              Value: !Sub "${ProjectName}"
            - Name: DEBUG
              Value: 0
            - Name: SERVER
              Value: 1
            - Name: SECURITY_SALT
              Value: !Ref "SecuritySalt"
        - Name: web
          Image:
            !Sub [
              "${Param1}:latest",
              {
                Param1:
                  { "Fn::ImportValue": !Sub "${ProjectName}-web-repository" },
              },
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSTaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          PortMappings:
            - HostPort: 80
              Protocol: tcp
              ContainerPort: 80

  ##############################
  # ECS Service
  ##############################
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: { "Fn::ImportValue": !Sub "${ProjectName}-ecs-cluster" }
      ServiceName: !Sub ${ProjectName}-service
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - { "Fn::ImportValue": !Sub "${ProjectName}-web-sg" }
          Subnets:
            - { "Fn::ImportValue": !Sub "${ProjectName}-application-subnet1" }
            - { "Fn::ImportValue": !Sub "${ProjectName}-application-subnet2" }
            - { "Fn::ImportValue": !Sub "${ProjectName}-application-subnet3" }
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
          ContainerName: web

  ##############################
  # ALB TargetGroup
  ##############################
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-tg
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-vpc" }
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: "/"
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 10
  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        { "Fn::ImportValue": !Sub "${ProjectName}-alb-listener-arn" }
      Priority: 1
      Conditions:
        - Field: host-header
          Values:
            - "sample.*"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ECSServiceArn:
    Value: !Ref ECSService
    Export:
      Name: !Sub "${ProjectName}-ecs-service-arn"
  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${ProjectName}-tg-arn"
